% load example data set. This data set is generated by the black and white image "data.bmp", and the image can be edited using Microsoft paint.
n = 500;
sigma = 1;
im = imread('data.bmp');
im = flipud(im);
[row,col] = find(im == 0);
data = [col(:),row(:)];
rng(111);
data = data(randi(size(data,1),n,1),:);
data = data+sigma*randn(size(data));
data =  unique(data,'rows')-1;

% parameters
sigma = 5; % parameter of QC - width of gaussians
rep = 	300; % number of steps for gradient descent
stepSize = sigma/7; % step size for gradient descent
clusteringType = 'V'; % either 'V','S','P' for minimizing potential/maximizing entropy/maximizing wave function
recalculatePotential = false; % whether to use new replicas location for calculating a new wavefunction each step?
normalizeData = false; % whether to normalize data to the unit sphere on each step?
normalizeGradient = true; % whether to normalize gradient unit length before multiplying by step size?
voxelSize = []; % voxel size for approx. QC. can be [] for the non-approx algorithm
stochasticSz = []; % gradient will be estimated based on this relative part of the data points, chosen at random each step for each replica. can be [] for the non-stochastic algorithm. Otherwise should be in range (0,1]
howOftenToTestIfDone = 1; % how often to perform a check of whether stop condition of replica is fullfilled? This could be 1, unless using stochasticSz and then this should be higher

[x,xHistory] = PerformGDQC(data,sigma,rep,stepSize,clusteringType,recalculatePotential,normalizeData,[],normalizeGradient,stochasticSz,voxelSize,howOftenToTestIfDone);

clusters = PerformFinalClustering(x,stepSize);


DisplayQC(xHistory,clusters);